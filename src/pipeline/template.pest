template = { "{" ~ debug_flag? ~ operation_list? ~ "}" }

debug_flag = @{ "!" }

operation_list = { operation ~ ("|" ~ operation)* }

operation = {
    shorthand_range
  | shorthand_index
  | split
  | upper
  | lower
  | trim
  | append
  | prepend
  | surround
  | quote
  | join
  | substring
  | replace
  | map
  | filter
  | filter_not
  | slice
  | sort
  | reverse
  | unique
  | regex_extract
  | strip_ansi
  | pad
}

shorthand_index = { number }
shorthand_range = {
    range_to_inclusive
  | range_to
  | range_inclusive
  | range_exclusive
  | range_from
  | range_full
}

// Argument parsing - requires escaping for special characters
argument     = { (escaped_char | normal_char)* }
normal_char  = { !("|" | "}" | "{" | ":" | "\\") ~ ANY }
escaped_char = { "\\" ~ ANY }

// Main operations - using specific arg types where needed
regex_extract =  { "regex_extract" ~ ":" ~ argument ~ (":" ~ number)? }
filter_not    =  { "filter_not" ~ ":" ~ argument }
filter        =  { "filter" ~ ":" ~ argument }
strip_ansi    = @{ "strip_ansi" }
map           =  { "map" ~ ":" ~ map_operation }
split         =  { "split" ~ ":" ~ argument ~ ":" ~ range_spec? }
substring     =  { "substring" ~ ":" ~ range_spec }
replace       =  { "replace" ~ ":" ~ sed_string }
append        =  { "append" ~ ":" ~ argument }
prepend       =  { "prepend" ~ ":" ~ argument }
surround      =  { "surround" ~ ":" ~ argument }
quote         =  { "quote" ~ ":" ~ argument }
upper         = @{ "upper" }
lower         = @{ "lower" }
trim          =  { "trim" ~ (":" ~ argument)? ~ (":" ~ direction)? }
join          =  { "join" ~ ":" ~ argument }
slice         =  { "slice" ~ ":" ~ range_spec }
sort          =  { "sort" ~ (":" ~ sort_direction)? }
reverse       = @{ "reverse" }
unique        = @{ "unique" }
pad           =  { "pad" ~ ":" ~ number ~ (":" ~ pad_char)? ~ (":" ~ direction)? }

// Direction specifiers
direction      = @{ "left" | "right" | "both" }
sort_direction = @{ "asc" | "desc" }
pad_char       = @{ argument }

// Map operation
map_operation       = { "{" ~ map_operation_list ~ "}" }
map_operation_list  = { map_inner_operation ~ ("|" ~ map_inner_operation)* }
map_inner_operation = {
    strip_ansi
  | substring
  | replace
  | append
  | prepend
  | surround
  | quote
  | upper
  | lower
  | trim
  | pad
  | reverse
  | map_split
  | map_join
  | map_slice
  | map_sort
  | map_unique
  | map_filter
  | map_filter_not
  | map_regex_extract
}

// Map-specific operations that need special handling
map_split      =  { "split" ~ ":" ~ argument ~ (":" ~ range_spec)? }
map_join       =  { "join" ~ ":" ~ argument }
map_slice      =  { "slice" ~ ":" ~ range_spec }
map_sort       =  { "sort" ~ (":" ~ sort_direction)? }
map_unique     = @{ "unique" }
map_filter     =  { "filter" ~ ":" ~ argument }
map_filter_not =  { "filter_not" ~ ":" ~ argument }

// Map-specific regex extract
map_regex_extract = { "regex_extract" ~ ":" ~ argument ~ (":" ~ number)? }

// Sed strings
sed_string       =  { "s/" ~ sed_pattern ~ "/" ~ sed_replacement ~ "/" ~ sed_flags? }
sed_pattern      = @{ sed_content }
sed_replacement  = @{ sed_content }
sed_content      =  { (sed_escaped_char | sed_normal_char)* }
sed_normal_char  =  { !("/" | "\\") ~ ANY }
sed_escaped_char =  { "\\" ~ ANY }
sed_flags        = @{ ASCII_ALPHA* }

// Range specifications
range_spec = {
    range_to_inclusive
  | range_to
  | range_inclusive
  | range_exclusive
  | range_from
  | range_full
  | index
}

range_inclusive    = { number? ~ "..=" ~ number? }
range_exclusive    = { number? ~ ".." ~ number? }
range_from         = { number ~ ".." }
range_to           = { ".." ~ number }
range_to_inclusive = { "..=" ~ number }
range_full         = { ".." }
index              = { number }

number = @{ "-"? ~ ASCII_DIGIT+ }
